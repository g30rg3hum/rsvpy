generator client {
  provider = "prisma-client-js"
  output   = "../node_modules/.prisma/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(uuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  scope             String?
  access_token      String?
  expires_at        Int?
  id_token          String?
  session_state     String?
  token_type        String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(uuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id               String          @id @default(uuid())
  email            String          @unique
  createdAt        DateTime        @default(now())
  firstName        String
  lastName         String
  emailVerified    DateTime?
  uploadedPfp      Boolean         @default(false)
  paymentInformation String?
  accounts         Account[]
  ownedEvents      Event[]         @relation("EventCreator")
  eventAttendees   EventAttendee[] @relation("EventAttendee")
  // paymentsMade     Payment[]       @relation("Payer")
  // paymentsReceived Payment[]       @relation("Receiver")
  sessions         Session[]
  wallets          Wallet?         @relation("WalletOwner")
}

model Wallet {
  id        String   @id @default(uuid())
  userId    String   @unique
  balance   Float    @default(0)
  currency  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation("WalletOwner", fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@id([identifier, token])
  @@unique([identifier, token])
}

model Event {
  id            String          @id @default(uuid())
  title         String
  description   String
  location      String
  totalPrice    Float
  maxAttendees  Int
  creatorId     String
  createdAt     DateTime        @default(now())
  currency      String
  endDateTime   DateTime?
  startDateTime DateTime
  creator       User            @relation("EventCreator", fields: [creatorId], references: [id])
  attendees     EventAttendee[]
  restarts      EventRestart[]
  spaceNotifications EventSpaceNotification[]
  // payments      Payment[]
}

model EventRestart {
  id            String        @id @default(uuid())
  eventId       String
  restartDate   DateTime      @default(now())
  event         Event         @relation(fields: [eventId], references: [id], onDelete: Cascade)
}

model EventAttendee {
  id            String        @id @default(uuid())
  userId        String
  eventId       String
  rsvpStatus    RSVPStatus    @default(TENTATIVE)
  // paymentStatus PaymentStatus @default(PENDING)
  payment       PaymentTransferStatus @default(PENDING)
  createdAt     DateTime      @default(now())
  old           Boolean       @default(false)
  event         Event         @relation(fields: [eventId], references: [id], onDelete: Cascade)
  user          User          @relation("EventAttendee", fields: [userId], references: [id])
}

model EventSpaceNotification {
  id        String   @id @default(uuid())
  email     String
  eventId   String
  createdAt DateTime @default(now())
  event     Event    @relation(fields: [eventId], references: [id], onDelete: Cascade)

  @@unique([email, eventId])
}

// model Payment {
//   id                    String        @id @default(uuid())
//   payerId               String
//   receiverId            String
//   eventId               String
//   amount                Float
//   currency              String
//   status                PaymentStatus @default(PENDING)
//   stripePaymentIntentId String
//   paidAt                DateTime?
//   createdAt             DateTime      @default(now())
//   event                 Event         @relation(fields: [eventId], references: [id], onDelete: Cascade)
//   payer                 User          @relation("Payer", fields: [payerId], references: [id])
//   receiver              User          @relation("Receiver", fields: [receiverId], references: [id])
// }

// enum PaymentStatus {
//   PENDING
//   COMPLETED
// }

enum PaymentTransferStatus {
  TRANSFERRED
  CASH
  PENDING
  NA
}

enum RSVPStatus {
  ACCEPTED
  DECLINED
  INVITED
  TENTATIVE
}
